=== TF2 commands ===
--- Generate pdf file with TF transform tree
ros2 run tf2_tools view_frames.py

---  tf_echo reports the transform between any two frames broadcast over ROS
ros2 run tf2_ros tf2_echo <parent frame> <child frame>

=== ROS2 topic commands ===
ros2 topic echo /wheel/odometry

=== ROS2 params ===
To see the parameters belonging to your nodes
ros2 param list

To display the type and current value of a parameter
ros2 param get <node_name> <parameter_name>

This command will set the value of a particular parameter on a particular node. 
ros2 param set <node_name> <parameter_name> <parameter_value>
ros2 param set /my_node my_string off

To save your current configuration of node’s parameters, enter the command:
ros2 param dump <node_name>

Get the installation location of package
ros2 pkg prefix <package name>


=== Gazebo ===
--- Add path to robot model (this line maybe added to ~/.bashrc or docker images entrypoint
--- [ros_entrypoint.sh])
export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/ros_ws/src/bigfootbot_description/models/


==== Docker commmands ===

--- Buid image
docker build -f Dockerfile.aarch64.humble.nav2.realsense -t humble_realsense:latest --build-arg BASE_IMAGE="nvidia_x86_64_humble_nv2" .

--- Run new terminal in the running container
docker exec -it <container-name/ID> bash

--- Run docker containers with GUI ---
docker run -it \
    --env="DISPLAY" \
    --env="QT_X11_NO_MITSHM=1" \
    --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
    osrf/ros:indigo-desktop-full \
    rqt

xhost +local:root 
OR
xhost +

docker run -it --privileged --network host --runtime=nvidia --gpus all --rm --env="DISPLAY" --env="QT_X11_NO_MITSHM=1" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" aarch64_humble_realsense:latest
(--rm Automatically remove the container when it exits)
(--privileged flag gives all capabilities to the container, and it also lifts all the limitations enforced by the device cgroup controller. 
In other words, the container can then do almost everything that the host can do)
--- end of block 'run docker containers wit GUI ---

--- Create and start containers
docker-compose up
docker-compose up --build (Build images before starting containers.)

--- Start the stopped containers, can't create new ones
docker-compose start

--- Stop and remove containers, networks, images, and volumes
docker-compose down

--- List containers
docker ps -a

=== END OF BLOCK 'docker commands' ===



=== WSL2 ===
-- Attach USB devices
--- From an administrator command prompt on Windows, run this command. 
--- It will list all the USB devices connected to Windows.
usbipd wsl list

--- Select the bus ID of the device you’d like to attach to WSL and run this command. 
--- You’ll be prompted by WSL for a password to run a sudo command.
usbipd wsl attach --busid <busid>