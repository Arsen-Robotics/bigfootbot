 === Linux commands ====
 `pstree` - display a tree diagram of running processes
 `pstree <PID>` - This will show the process tree starting from the specified PID

 `killall chrome` -  terminate all running instances of the Google Chrome browser on your Linux system
 `killall -9 process_name` - This signal is commonly known as a "forceful" or "hard" kill signal because it immediately 
                             terminates the processes without allowing them to perform any cleanup tasks or graceful shutdown procedures.
 `miniterm` - simple terminal program for the serial port (installed as part of pyserial package `sudo apt install python3-serial`)
              can be used to send commands to the serial port (e.g. send to Arduino [Arduino is used as a motor controller])
              `miniterm /dev/ttyACM0 115200` - open serial port with baudrate 115200
  --- Networking
   -- Scan hosts in the network --
    `nmap -sn 192.168.5.0/24` - performs a ping scan to find live hosts in the range 192.168.5.0
                              -sn: Ping Scan - disable port scan  
    `nmap -p 22 192.168.5.0/24` - scan for hosts with port 22 (SSH) open  

   -- systemd-networkd is part of the systemd init system and offers a minimalistic approach to network configuration 
      and management, often used in server environments
    - `/etc/systemd/network/` - network configuration files are stored in this directory
    - `systemctl status systemd-networkd.service` - show status of systemd-networkd service

   -- NetworkManager is a daemon that sits on top of libudev and other Linux kernel interfaces and provides a 
      high-level interface for the configuration of the network interfaces
    - `/etc/NetworkManager/` - NetworkManager configuration files are stored in this directory
    - `/etc/NetworkManager/system-connections/`: This directory holds configuration files for network connections, 
      each represented as a separate file. These files are usually named after the connection's name.
    - `systemctl status NetworkManager.service` - show status of NetworkManager service
    - `mcli` is a command-line tool for controlling NetworkManager and reporting network status.
    - `nmcli device show` - show all network interfaces
    - `nmcli connection show` - show all connections
    - `nmcli connection up <connection_name>` - activate connection
    - `nmcli connection down <connection_name>` - deactivate connection
    - `nmtui` - text user interface for NetworkManager
   
   -- Netplan is a network configuration utility for Linux. It is used to configure the network interfaces 
      through YAML files. From YAML description Netplan will generate all the necessary configuration for your 
      chosen renderer tool (NetworkManager or networkd).
    - `/etc/netplan/` - config files (.yaml) are located in this directory
    - `netplan apply` - apply changes

=== TF2 commands ===
--- Generate pdf file with TF transform tree
ros2 run tf2_tools view_frames.py

---  tf_echo reports the transform between any two frames broadcast over ROS
ros2 run tf2_ros tf2_echo <parent frame> <child frame>

=== ROS2 topic commands ===
ros2 topic echo /wheel/odometry
`ros2 topic echo /my_topic --no-arr` --no-addr - don't print array fields of messages

Retrieve information about a topic
`ros2 topic info /tf --verbose`

# Name remapping
ros2 run rplidar_ros rplidar_node --ros-args -r __ns:=scanner2
`-r __ns:=scanner2` this changes the namespace of the node rplidar_node to 'scanner2' (/scanner/rplidar_node) 
`-r __node:=<new node name>` this renames the node to 'new_node_name'.
Namespace allows you to run multiple instances of the same node with separate parameter spaces.

=== ROS2 params ===
To see the parameters belonging to your nodes
ros2 param list

To display the type and current value of a parameter
ros2 param get <node_name> <parameter_name>

This command will set the value of a particular parameter on a particular node. 
ros2 param set <node_name> <parameter_name> <parameter_value>
ros2 param set /my_node my_string off

To save your current configuration of node’s parameters, enter the command:
ros2 param dump <node_name>
===

=== ROS2 control commands ===
`ros2 control list_hardware_interfaces` - list all hardware interfaces available in the system
===

Get the installation location of package
ros2 pkg prefix <package name>


=== Gazebo ===
--- Add path to robot model (this line maybe added to ~/.bashrc or docker images entrypoint
--- [ros_entrypoint.sh])
export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/ros_ws/src/bigfootbot_description/models/


==== Docker commmands ===

--- Buid image
docker build -f Dockerfile.aarch64.humble.nav2.realsense -t humble_realsense:latest --build-arg BASE_IMAGE="nvidia_x86_64_humble_nv2" ..

--- Run new terminal in the running container
docker exec -it <container-name/ID> bash

--- Run docker containers with GUI ---
xhost +local:root 
OR
xhost +

docker run -it --rm --privileged --network host --runtime=nvidia --gpus all --env="DISPLAY" --env="QT_X11_NO_MITSHM=1" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" aarch64_humble_realsense:latest
(--rm Automatically remove the container when it exits)
(--gpus # flag when you start a container to access GPU resources. Specify how many GPUs to use (all - use all GPUs))
(--privileged flag gives all capabilities to the container, and it also lifts all the limitations enforced by the device cgroup controller. 
(--volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" read-write mode (i.e. the container can write as well as read files on the host))
In other words, the container can then do almost everything that the host can do)

--- end of block 'run docker containers wit GUI ---

--- Create and start containers
docker compose -f docker-compose_lenovo.yml up # Version2

docker-compose up
docker-compose up --build (Build images before starting containers.)

--- Start the stopped containers, can't create new ones
docker-compose start

--- Stop and remove containers, networks, images, and volumes
docker-compose down

--- List containers
docker-compose ps
docker ps -a

--- Inspect (containers, networks, images, volumes)
`docker inspect <container name>` - show container info (IP address, etc)
   docker container inspect 2186a1927d6a | grep compose 
`docker inspect <network name>` - show network info
`docker inspect <image name>` - show image info
`docker inspect <volume name>` - show volume info

=== END OF BLOCK 'docker commands' ===



=== WSL2 ===
-- Attach USB devices
--- From an administrator command prompt on Windows, run this command. 
--- It will list all the USB devices connected to Windows.
usbipd wsl list

--- Select the bus ID of the device you’d like to attach to WSL and run this command. 
--- You’ll be prompted by WSL for a password to run a sudo command.
usbipd wsl attach --busid <busid>