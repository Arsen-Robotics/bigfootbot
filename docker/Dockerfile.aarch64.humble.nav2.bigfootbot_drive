
# For running on Nvidia Jetson device (Nvidia GPU accelerated)
#ARG BASE_IMAGE="nvcr.io/nvidia/isaac/ros:aarch64-humble-nav2_c2befe2b1d90532fc15ef72650ccd7b0"

# For running on x86/amd64 PC 
# NB! Not Nvidia GPU accelerated
ARG BASE_IMAGE="ros:humble-ros-base"

FROM ${BASE_IMAGE}

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ENV DEBIAN_FRONTEND=noninteractive

# If you only need to set the SHELL environment variable for other purposes, such as in a 
# script that will be run inside the container
# NB! This command sets the SHELL environment variable to /bin/bash, but it does not change 
# the default shell used to run subsequent commands in the Dockerfile
ENV SHELL=/bin/bash

# Sets the default shell for running subsequent commands in the Dockerfile
# (the default shell on Linux is ["/bin/sh", "-c"])
# -c: This option specifies that the next argument is the command to execute.
SHELL ["/bin/bash", "-c"] 

# ROS2 workspace
ENV ROS_WS=/ros2_ws

# Fundamentals
#RUN apt-get update && apt-get install -y \
#    build-essential \
#    curl \
#    git \
#    lsb-release \
#    sudo \
#    tar \
#    unzip \
#    vim \
#    wget \
#    libgoogle-glog-dev \
#    software-properties-common \
#&& rm -rf /var/lib/apt/lists/* \
#&& apt-get clean

# Install additional packages needed for ROS2 dependencies
#RUN apt-get update && apt-get install -y \
#    python3-distutils \
#    libboost-all-dev \
#    libboost-dev \
#    libpcl-dev \
#    libode-dev \
#    lcov \
#    python3-zmq \
#    libxaw7-dev \
#    libgraphicsmagick++1-dev \
#    graphicsmagick-libmagick-dev-compat \
#    libceres-dev \
#    libsuitesparse-dev \
#    libncurses5-dev \
#    libassimp-dev \
#   libyaml-cpp-dev \
#    libpcap-dev \
#&& rm -rf /var/lib/apt/lists/* \
#&& apt-get clean

# Install additional packages needed for ROS2 dependencies
RUN apt-get update && apt-get install -y \
#    python3-distutils \
    libboost-all-dev \
#    libboost-dev \
#    libpcl-dev \
#    libode-dev \
#    lcov \
#    python3-zmq \
#    libxaw7-dev \
#    libgraphicsmagick++1-dev \
#    graphicsmagick-libmagick-dev-compat \
#    libceres-dev \
#    libsuitesparse-dev \
#    libncurses5-dev \
#    libassimp-dev \
#   libyaml-cpp-dev \
#    libpcap-dev \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Create ROS2 working directory
RUN mkdir -p ${ROS_WS}/src

##### Build and install BigfootBot drive packages 
COPY bigfootbot_base ${ROS_WS}/src/bigfootbot_base
COPY bigfootbot_bringup ${ROS_WS}/src/bigfootbot_bringup

# Clone sources of roboclaw driver (forked from https://github.com/wimblerobotics/ros2_roboclaw_driver.git) 
# ROS2 package "ros2_roboclaw_driver"
RUN cd ${ROS_WS}/src \
    && git clone https://github.com/jevgenik/ros2_roboclaw_driver.git

# Clone sources of joystick driver (ROS2 package "joy")
# NB! Repository forked from https://github.com/ros-drivers/joystick_drivers.git
# Repository ros-drivers/joystick_drivers contains many packages,
# we use package "joy" only:
# joy_node, a node that interfaces a generic joystick to ROS 2. This node publishes a 
# "sensor_msgs/msg/Joy" message, which contains the current state of each one of the joystick's buttons and axes.
# NB! package "joy" depends on the package "joystick_drivers/sdl2_vendor"
# NB! Use branch ros2
RUN cd ${ROS_WS}/src \
    && git clone -b ros2 https://github.com/jevgenik/joystick_drivers.git \
    && cp -r joystick_drivers/joy . \
    && cp -r joystick_drivers/sdl2_vendor . \
    && rm -rf ./joystick_drivers/

# Clone sources of ROS2 package "teleop_twist_joy"
# teleop_node that republishes sensor_msgs/msg/Joy messages as scaled geometry_msgs/msg/Twist messages.
RUN cd ${ROS_WS}/src \
    && git clone -b humble https://github.com/ros2/teleop_twist_joy.git

# Clone foxglove_bridge for communication with Foxglove studio
#RUN mkdir -p ${ROS_WS}/src && cd ${ROS_WS}/src \
#    && git clone https://github.com/foxglove/ros-foxglove-bridge.git

RUN apt-get update \
    && cd ${ROS_WS} \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && rosdep update \
    && rosdep install -y \
      --ignore-src \
      --from-path src \ 
      --rosdistro ${ROS_DISTRO} \
      --skip-keys "bigfootbot_teleop bigfootbot_description" \
    # NB! colcon build --symlink-install generate error "CMakeFiles/Makefile2:421: CMakeFiles/ament_cmake_python_symlink_realsense2_camera_msgs.dir/all] Error 2"
    ##&& colcon build \
    && colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    #&& rm -rf src logs build \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean 
##### end of 'BigFootBot drive packages'

# Install GDB and GDB server
#RUN apt-get update \
#    && apt-get install -y gdb \
#      gdbserverr

##### Setup entrypoint
COPY docker/ros_entrypoint.sh /

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]

#CMD ["ros2", "launch", "bigfootbot_bringup", "ros2_roboclaw_driver.launch.py"]
CMD ["bash"]