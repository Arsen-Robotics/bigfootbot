ARG BASE_IMAGE="nvcr.io/nvidia/isaac/ros:aarch64-humble-nav2_c2befe2b1d90532fc15ef72650ccd7b0"
FROM ${BASE_IMAGE} 

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_WS=/ros2_ws
# OR ENV ROS_WS /ros2_ws 
#WORKDIR $ROS_WS

#ENV SHELL /bin/bash
#SHELL ["/bin/bash", "-c"]

# === Install RealSense SDK
# Register the server's public key:
#RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || \
#    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE

# Add the server to the list of repositories:
#RUN add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -cs) main" -u

# Install the libraries (see section below if upgrading packages):
# The below two lines will deploy librealsense2 udev rules, build and activate kernel modules, runtime library and executable demos and tools.
#RUN apt-get update && apt-get install -y \ 
#    librealsense2-dkms \
#    librealsense2-utils \
#    librealsense2-dev

# -- Build RealSense SDK from sources
# https://github.com/jetsonhacks/installRealSenseSDK
COPY docker/scripts/build-librealsense.sh /opt/realsense/build-librealsense.sh
COPY docker/scripts/install-realsense-dependencies.sh /opt/realsense/install-realsense-dependencies.sh

RUN chmod +x /opt/realsense/install-realsense-dependencies.sh && /opt/realsense/install-realsense-dependencies.sh
RUN chmod +x /opt/realsense/build-librealsense.sh && /opt/realsense/build-librealsense.sh
# === end of block 'install RealSense SDK'

# === Install ROS2 Wrapper for RealSense
# Create a ROS2 workspace
# Clone the latest ROS2 Intel® RealSense™ wrapper to '/ros2_ws/src/
RUN mkdir -p ${ROS_WS}/src \
    && cd ${ROS_WS}/src/ \
    && git clone https://github.com/IntelRealSense/realsense-ros.git -b ros2-development
    #&& rm -rf ./realsense-ros/realsense2_description

# --Install dependencies
# Install rosdep
#RUN apt-get install python3-rosdep -y

# Install ROS dependencies (ROS packages on which depend packages that located in the src directory)
# -y, --default-yes Tell the package manager to default to y or fail when installing
# -r Continue installing despite errors
# --skip-keys The specified rosdep keys will be ignored, i.e. not resolved and not installed
# -- symlink-install if you change code in your source code, it will take effect, 
#    you don't have to compile it again (ony with python, not c++)
# --event-handlers console_direct+ shows console output while building (can otherwise be found in the log directory)
RUN cd ${ROS_WS} \
    && source /opt/ros/humble/setup.bash \
    && rosdep update \
    && rosdep install -y -r --ignore-src --from-path src --rosdistro $ROS_DISTRO --skip-keys=librealsense2 \
    && colcon build 
# TODO! add --symlink-install to colcon build ?

# === end of block 'install ROS2 Wrapper for RealSense'

# === Install foxglove_bridge for communication with Foxglove studio
RUN cd ${ROS_WS}/src/ \
    && git clone https://github.com/foxglove/ros-foxglove-bridge.git \
    && cd ${ROS_WS} \
    && source /opt/ros/humble/setup.bash \
    && rosdep update \
    && rosdep install -y -r --ignore-src --from-path src \
    && colcon build 
    #&& rm -rf src logs build \
    #&& rm -rf /var/lib/apt/lists/* \
    #&& apt-get clean
# === end of block 'foxglove_bridge'

# === Install BigFootBot

COPY bigfootbot_description ${ROS_WS}/src/bigfootbot_description 

# === end of 'BigFootBot'

# === Setup Fast DDS default profile configuration (env var. FASTRTPS_DEFAULT_PROFILES_FILE)
COPY docker/fastdds_husarnet.xml /

# === Setup entrypoint
COPY docker/ros_entrypoint.sh /

# Scripts launching Foxglove node and RealSense node
#COPY ./scripts/launch_foxglove.sh /
#COPY ./scripts/launch_realsense.sh /
COPY docker/scripts/launch.sh /

# Change workdir
#WORKDIR /root/ros2_ws

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]
#CMD ["bash"]
CMD ["./launch.sh"]

# We used the shell form of the CMD directive. The two echo commands were effectively executed sequentially.
#CMD ros2 run foxglove_bridge foxglove_bridge; ros2 launch realsense2_camera rs_launch.py

# Although the exec form doesn’t start a shell on its own, we can set the /bin/sh -c or the /bin/bash -c commands 
# in the CMD executable position, and invoke the shell:
#CMD ["/bin/bash", "-c", "echo FIRST COMMAND;echo SECOND COMMAND"]
#CMD ["/bin/bash", "-c", "ros2 run foxglove_bridge foxglove_bridge; ros2 launch realsense2_camera rs_launch.py"]

# ros2 launch foxglove_bridge foxglove_bridge_launch.xml port:=8765

# Run foxglove_bridge
#CMD ["ros2", "run", "foxglove_bridge", "foxglove_bridge"]
# ===
