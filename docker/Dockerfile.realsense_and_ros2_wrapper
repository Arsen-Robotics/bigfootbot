ARG BASE_IMAGE
FROM ${BASE_IMAGE} 

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ARG DEBIAN_FRONTEND=noninteractive

# --- Install RealSense SDK
# Register the server's public key:
RUN sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || \
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE

# Add the server to the list of repositories:
RUN sudo add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -cs) main" -u

# Install the libraries (see section below if upgrading packages):
# The below two lines will deploy librealsense2 udev rules, build and activate kernel modules, runtime library and executable demos and tools.
RUN sudo apt-get update && apt-get install -y \ 
    librealsense2-dkms \
    librealsense2-utils \
    librealsense2-dev
# --- end of block 'install RealSense SDK'

# --- Install ROS2 Wrapper for RealSense
# Create a ROS2 workspace
# Clone the latest ROS2 Intel® RealSense™ wrapper to '~/ros2_ws/src/
RUN mkdir -p ~/ros2_ws/src \
    && cd ~/ros2_ws/src/ \
    && git clone https://github.com/IntelRealSense/realsense-ros.git -b ros2-development
    #&& rm -rf ./realsense-ros/realsense2_description

# --Install dependencies
# Install rosdep
RUN sudo apt-get install python3-rosdep -y

# Install ROS dependencies (ROS packages on which depend packages that located in the src directory)
# - y Tell the package manager to default to y or fail when installing
# - r Continue installing despite errors
# --skip-keys The specified rosdep keys will be ignored, i.e. not resolved and not installed
RUN source /opt/ros/humble/setup.bash \
    && cd ~/ros2_ws/ \
    && rosdep update \
    && rosdep install -y -r --ignore-src --from-path src --rosdistro $ROS_DISTRO --skip-keys=librealsense2 \
    && colcon build

# Build workspace
#RUN colcon build

# --- end of block 'install ROS2 Wrapper for RealSense'

# --- Setup entrypoint
COPY ./ros_entrypoint.sh /

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
# ---