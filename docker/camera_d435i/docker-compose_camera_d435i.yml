#version: '3.5' # version flag is Depricated in Docker compose V2?

# --- Docker compose commands ---

# Create and start containers defined in the compose file
# NOTE Docker Compose detects changes in your configuration files, 
# including the Dockerfile, and automatically rebuilds the corresponding images if necessary
#   `docker compose -f docker-compose_camera_d435i.yml up'
#
# Stop and remove containers that were created based on the 
# configuration specified in the compose file.
#   `docker compose -f docker-compose_camera_d435i.yml down'
# 
# Rebuild all services (all the images are built from scratch)
# --build option indicates that Docker Compose should rebuild the images, 
# even if they already exist
#   `docker compose -f docker-compose_camera_d435i.yml up --build`
# 
# To rebuild a certain service:
#   `docker compose up --build <service_name>`
#
# To run a certain service:
#   `docker compose up <service_name>`
#   i.e `docker compose -f docker-compose_camera_d435i.yml up bfb_camera_d435i`
# --------------------

services:
  # --- Depth camera Intel D435i ---
  bfb_camera_d435i:
    #restart: unless-stopped
    
    build: 
      context: ../../ 
      dockerfile: docker/camera_d435i/Dockerfile.bfb_camera_d435i

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        - BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_b7e1ed6c02a6fa3c1c7392479291c035
        
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        #- BASE_IMAGE=ros:humble-ros-base

    # The name of the Docker image to be created from the Dockerfile.
    image: bfb_camera_d435i:latest

    # The name to be given to the container created from the image.
    container_name: bfb_camera_D435i_container

    volumes:     
      # Mount launch files to be able to update them inside the container without rebuilding the image
      - ../../bigfootbot_teleop/launch:/ros2_ws/install/bigfootbot_teleop/share/bigfootbot_teleop/launch

      # Enable on-the-fly parameter updates without the need for container restarts.
      - ../../bigfootbot_teleop/config:/ros2_ws/install/bigfootbot_teleop/share/bigfootbot_teleop/config 

    privileged: true
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #command: ros2 launch /path/to/new_bfb_teleop_launch_file.launch

    #network_mode: host 
    
    #networks:
     # bfb_network:

    # This section makes service 'bfb_description' move into the namespace of Husarnet.
    # This means you no longer can configure ports and other networking settings here
    # and all of those configs need to be moved to declaration of service 'husarnet'.
    # This will also wait on Husarnet to actually start before starting your app
    #network_mode: service:husarnet
    #depends_on:
    #  husarnet: { condition: service_healthy }    
  # --- end of 'bfb_teleop' service ---
  
#   # Husarnet VPN
#   husarnet:
#     image: husarnet/husarnet:latest

#     # The name to be given to the container created from the image.
#     container_name: teleop_husarnet_container
    
#     volumes:
#       # This will persist your Husarnet Client keys, thus IP of the container
#       # will be stable/the same between (re)boots.
#       # Feel free to choose any volume storage method of your liking
#       - ../husarnet-config:/var/lib/husarnet
#       #- ~/husarnet-config:/var/lib/husarnet      

#     # The cap_add key is used to add Linux capabilities to the containers in the application. 
#     # In this case, the cap_add key is used to add the NET_ADMIN capability to the containers.
#     # Linux capabilities are a way to give a process some privileges without giving it full root access. 
#     # The NET_ADMIN capability allows a process to perform various network-related tasks, such as 
#     # configuring network interfaces and setting up tunnels.
#     # This is required to create new interface for communication over Husarnet
#     cap_add:
#       - NET_ADMIN
    
#     # The sysctls key in a Docker Compose file is used to set kernel parameters for 
#     # the containers in the application. These parameters are typically used to 
#     # tune the performance of the container or to enable certain features.
#     # Husarnet is using IPv6 for it's overlay network so we need 
#     # to make sure it's not disabled
#     sysctls:
#       - net.ipv6.conf.all.disable_ipv6=0
  
#     environment:
#       - HUSARNET_HOSTNAME=laptop_teleop
#       - HUSARNET_JOIN_CODE=fc94:b01d:1803:8dd8:b293:5c7d:7639:932a/eUZN7ZCtCYukxdyyGqay3z
#       - HUSARNET_DEBUG=0

#     #env_file: 
#     #    - ./.env  # create .env file in the same folder as Dockerfile and specify HOSTNAME and JOINCODE there

#     # As your apps are now running in Husarnet's container network namespace,
#     # you need to move all the usual networking-related declarations here
#     # If you want to expose your services additionally to hosts from local network (possibly on different ports)
#     #ports:
#     #  - "8765:8765"
#     #  - "8081:81"  # for app1
#     #  - "8082:82"  # for app2

# #networks:
# #  bfb_network:
# #    external: true # Use an existing network called "bfb_network" (created using `docker network create bfb_network`)
#                    # instead of creating a new one for this project (docker-compose_teleop.yml)