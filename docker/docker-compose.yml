#version: '3.5' # version flag is Depricated in Docker compose V2?

# --- Docker compose commands ---
# Create and start containers defined in the compose file
# NOTE Docker Compose detects changes in your configuration files, 
# including the Dockerfile, and automatically rebuilds the corresponding images if necessary
#  `docker compose -f docker-compose.yml up'
#
# Stop and remove containers that were created based on the 
# configuration specified in the compose file.
#  `docker compose -f docker-compose.yml down'
# 
# Rebuild all services (all the images are built from scratch)
# --build option indicates that Docker Compose should rebuild the images, 
# even if they already exist
#  `docker compose -f docker-compose.yml up --build`
# To rebuild a certain service:
# `docker compose up --build <service_name>`
# --------------------

services:
  # --- BRINGUP
  ##bfb_bringup:
  ##  build: 
  ##    context: ..
  ##    dockerfile: docker/Dockerfile.bfb_bringup
  ##  image: bfb_bringup:latest
  ##  container_name: bfb_bringup_container
  ##  volumes:
  ##    - ../bigfootbot_bringup/launch:/ros2_ws/install/bigfootbot_bringup/share/bigfootbot_bringup/launch     
  ##  stdin_open: true # docker run -i
  ##  tty: true        # docker run -t

    #network_mode: host
    #ipc: host # Interprocess communication. Check whether to enable or not. Maybe ROS2 nodes located in separate containers will communicate faster?

  ##  networks:
  ##    bfb_network:

  # --- DESCRIPTION
  bfb_description:
    #restart: unless-stopped
    
    build: 
      context: ..
      dockerfile: docker/Dockerfile.bfb_description

    # The name of the Docker image to be created from the Dockerfile.
    image: bfb_description:latest

    # The name to be given to the container created from the image.
    container_name: bfb_description_container

    volumes:
      # Forward X socket to container to enable GUI
      - /tmp/.X11-unix:/tmp/.X11-unix:rw

      # Mount urf file to be able to change robot model on-the-fly in the running container
      # Without a need to rebuild the image
      #- ../bigfootbot_description:/ros2_ws/src/bigfootbot_description:rw 
      - ../bigfootbot_description/urdf:/ros2_ws/install/bigfootbot_description/share/bigfootbot_description/urdf

    environment:
      - DISPLAY=$DISPLAY  # To allow the container to access the host's 
                          # X11 server for GUI applications.
      - QT_X11_NO_MITSHM=1 # To prevent Qt applications from crashing (bug fix)

    # Enable GPU access for the container
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

    runtime: nvidia
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    # Overload the default command executed by the container
    command: ros2 launch bigfootbot_description view_robot.launch.py use_rviz:=false model:=/ros2_ws/install/bigfootbot_description/share/bigfootbot_description/urdf/bigfootbot_NEW.urdf.xacro
    
    #networks:
    #  bfb_network:

    network_mode: host

  # --- BASE (motor controller)
  bfb_base:
    #restart: unless-stopped
    
    build: 
      context: ..
      dockerfile: docker/Dockerfile.bfb_base

    # the name of the Docker image to be created from the Dockerfile.
    image: bfb_base:latest

    # the name to be given to the container created from the image.
    container_name: bfb_base_container
    #working_dir: /webcam

    volumes:
      # Roboclaw motor driver config file. It is added as volume to be able to change motor driver parameters 
      # on-the-fly in the running container
      - ../bigfootbot_base/config/roboclaw_config.yaml:/ros2_ws/install/bigfootbot_base/share/bigfootbot_base/config/roboclaw_config.yaml                                                       

    # Enable GPU access for the container
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

    runtime: nvidia
    
    # Allows you to explicitly specify device files that should be made 
    # available within the container. For example, devices: /dev/ttyACM0:/dev/ttyACM0 
    # would make the /dev/ttyACM0 device file accessible within the container. 
    # NOTE: parameter 'devices' works fine (unlike privileged:true) with symlinks 
    # for devices in /dev folder created on the host using udev rules 
    devices:
      - /dev/roboclaw:/dev/roboclaw
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #command: ros2 launch /path/to/new_bfb_teleop_launch_file.launch

    #network_mode: host

    #ipc: host # Interprocess communication. Check whether to enable or not. Maybe ROS2 nodes located in separate containers will communicate faster?

    #networks:
    #  bfb_network:

    network_mode: host
   
  # --- TELEOPERATION
  bfb_teleop:
    #restart: unless-stopped
    
    build: 
      context: ..
      dockerfile: docker/Dockerfile.bfb_teleop

    # The name of the Docker image to be created from the Dockerfile.
    image: bfb_teleop:latest

    # The name to be given to the container created from the image.
    container_name: bfb_teleop_container

    volumes:
      # Enable on-the-fly parameter updates without the need for container restarts.
      - ../bigfootbot_teleop/config:/ros2_ws/install/bigfootbot_teleop/share/bigfootbot_teleop/config 

    privileged: true
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #command: ros2 launch /path/to/new_bfb_teleop_launch_file.launch
    
    #networks:
     # bfb_network:
    network_mode: host


#networks:
 # bfb_network:

  ####################  BIGFOOTBOT REALSENSE ################
  #bfb_realsense:
    ##restart: unless-stopped
   # build: 
    #  context: ..
     # dockerfile: docker/Dockerfile.aarch64.humble.nav2_bigfootbot_realsense

   # image: bigfootbot_realsense

    #container_name: bigfootbot_realsense
    ##working_dir: /webcam

    ##volumes:
      ## forward X socket to container to enable GUI 
     ## - /tmp/.X11-unix:/tmp/.X11-unix:rw
      
      # Roboclaw motor driver config file. It is added as volume to be able to change motor driver parameters 
      ## on the fly in the running container
     ## - ../bigfootbot_base/config/roboclaw_config.yaml:/ros2_ws/install/bigfootbot_base/share/bigfootbot_base/config/roboclaw_config.yaml                                                       

    # Enable GPU access for the container
    #deploy:
     # resources:
      #  reservations:
       #   devices:
        #    - driver: nvidia
         #     capabilities: [gpu]

    #runtime: nvidia

    #environment:
    #  - DISPLAY
    #  - QT_X11_NO_MITSHM=1
    
    #privileged: true # To allow container to access RealSense camera (USB) on the host
    ##devices:
    ##  - /dev:/dev
    
    #stdin_open: true # docker run -i
    #tty: true        # docker run -t

    #network_mode: host

  # Test app (Web server)
  #test_app:
   # image: nginx
    
    #volumes:
   #   - ./test_html:/usr/share/nginx/html

   # network_mode: host

    # Published ports are discarded when using host network mode               
    #ports:
    #  - "80:80"
    
      