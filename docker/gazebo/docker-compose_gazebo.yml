# --- Docker compose commands ---
#
# Create and start containers defined in the compose file
# NOTE Docker Compose detects changes in your configuration files, 
# including the Dockerfile, and automatically rebuilds the corresponding images if necessary
#   `docker compose -f docker-compose_gazebo.yml up'
#
# Stop and remove containers that were created based on the 
# configuration specified in the compose file.
#   `docker compose -f docker-compose_gazebo.yml down'
# 
# Rebuild all services (all the images are built from scratch)
# --build option indicates that Docker Compose should rebuild the images, 
# even if they already exist
#   `docker compose -f docker-compose_gazebo.yml up --build`
#
# To rebuild a certain service:
#   `docker compose up --build <service_name>`
#
# To run a certain service:
#   `docker compose up <service_name>`
# --------------------


#version: '3.5' # version flag is Depricated in Docker compose V2?
services:
  humble_gazebo:
    #restart: unless-stopped
    
    build: 
      context: ../../
      dockerfile: docker/gazebo/Dockerfile.gazebo

    # The name of the Docker image to be created from the Dockerfile.
    image: humble_gazebo:latest

    # The name to be given to the container created from the image.
    container_name: humble_gazebo_container

    volumes:
      # Forward X socket to container to enable GUI
      # Note: if privileged: true, then volumes: is not needed
      # because the container will have access to the host's X11 server
      - /tmp/.X11-unix:/tmp/.X11-unix:rw

      # Mount launch files to be able to update them inside the container without rebuilding the image
      - ../../bigfootbot_gazebo/launch:/ros2_ws/install/bigfootbot_gazebo/share/bigfootbot_gazebo/launch

    environment:
      - DISPLAY=$DISPLAY  # To allow the container to access the host's 
                          # X11 server for GUI applications.
      #- QT_X11_NO_MITSHM=1 # To prevent Qt applications from crashing (bug fix)

    # Enable GPU access for the container NB! Only for NVIDIA GPUs
    #deploy:
    #  resources:
    #    reservations:
    #      devices:
    #        - driver: nvidia
    #          capabilities: [gpu]

    #runtime: nvidia

    #privileged: true # To allow the container to access the host's 
                     # X11 server and GPU for GUI applications.
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    # Overload the default command executed by the container
    #command: "ign gazebo /usr/share/ignition/ignition-gazebo6/worlds/empty.sdf"  #/usr/share/gazebo-11/worlds/seesaw.world
    #command: bash -c "rviz2 && joint_state_publisher_gui"
    #command: "ros2 launch ros_gz_sim gz_sim.launch.py gz_args:=empty.sdf"
    command: "ros2 launch bigfootbot_gazebo gazebo.launch.py"
    #command: "bash"
    
    networks:
      bfb_network:

    #network_mode: host

networks:
  bfb_network:
    external: true # Use an existing network called "bfb_network" (created using `docker network create bfb_network`)
                   # instead of creating a new one for this project (docker-compose_gazebo.yml)
