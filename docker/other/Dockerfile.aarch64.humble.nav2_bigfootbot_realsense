ARG BASE_IMAGE="nvcr.io/nvidia/isaac/ros:aarch64-humble-nav2_c2befe2b1d90532fc15ef72650ccd7b0"
FROM ${BASE_IMAGE} 

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ENV DEBIAN_FRONTEND=noninteractive

ENV ROS_WS=/ros2_ws
#ENV SHELL /bin/bash
#SHELL ["/bin/bash", "-c"] 
#WORKDIR $ROS_WS

##### Build and install RealSense SDK (LibRealSense)
# https://github.com/jetsonhacks/installRealSenseSDK
COPY docker/scripts/build-librealsense.sh /opt/realsense/build-librealsense.sh
COPY docker/scripts/install-realsense-dependencies.sh /opt/realsense/install-realsense-dependencies.sh

RUN chmod +x /opt/realsense/install-realsense-dependencies.sh \
    && /opt/realsense/install-realsense-dependencies.sh \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean 
# NB! we build a particular (NB! not the latest one) release of LibRealSense because the latest release (by 06.03.2023 4.51.1)
# of the ROS2 Wrapper for RealSense supported only LibRealSense v2.51.1 
RUN chmod +x /opt/realsense/build-librealsense.sh \ 
    && /opt/realsense/build-librealsense.sh -v v2.51.1 
##### end of block 'build and install RealSense SDK'


##### Build and install ROS2 Wrapper for RealSense
# Create a ROS2 workspace
# Clone the latest ROS2 Intel® RealSense™ wrapper to '/ros2_ws/src/
RUN mkdir -p ${ROS_WS}/src \
    && cd ${ROS_WS}/src/ \
    && git clone https://github.com/IntelRealSense/realsense-ros.git -b 4.51.1
    # NB! We clone a particular release/tag 4.51.1 of the Librealsense in order to be sure 
    # it is compatible during a build with the RealSense SDK version (by 06.03.2023 is v2.51.1)

# --Install dependencies
# Install rosdep
#RUN apt-get install python3-rosdep -y

# Install ROS dependencies (ROS packages on which depend packages that located in the src directory)
# -y, --default-yes Tell the package manager to default to y or fail when installing
# -r Continue installing despite errors
# --skip-keys The specified rosdep keys will be ignored, i.e. not resolved and not installed
# --symlink-install if you change code in your source code, it will take effect, 
#   you don't have to compile it again (ony with python, not c++)
#   or e.g., the yaml configuration file in the workspace without having to rebuild the workspace.
# --event-handlers console_direct+ shows console output while building (can otherwise be found in the log directory)
RUN cd ${ROS_WS} \
    && source /opt/ros/humble/setup.bash \
    && rosdep update \
    && rosdep install -y -r --ignore-src --from-path src --rosdistro $ROS_DISTRO --skip-keys=librealsense2 \
    && colcon build --symlink-install 
# NB! colcon build --symlink-install generate error "CMakeFiles/Makefile2:421: CMakeFiles/ament_cmake_python_symlink_realsense2_camera_msgs.dir/all] Error 2"
# TODO! add --symlink-install to colcon build ?
##### end of block 'install ROS2 Wrapper for RealSense'

##### Setup entrypoint
COPY docker/ros_entrypoint.sh /

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]

CMD ["ros2", "launch", "realsense2_camera", "rs_launch.py", "rgb_camera.profile:=640x480x30"]
#CMD ["bash"]


############################################ TODO!
# 1) Add  
#    && rm -rf src logs build \
#    && rm -rf /var/lib/apt/lists/* \
#    && apt-get clean 
# to every RUN with apt-get update and colcon build

# 2) Add --skip-keys=librealsense2 in every call "rosdep install"

# 3) Refactoring
#    Don't call rosdep update before every rosdep install call. 
#    Maybe gather all git calls git clone of ROS packages and then 
#    call apt-get update and rosdep install and colcon build only once?
# 4) Add --symlink-install to every call "colcon build"
