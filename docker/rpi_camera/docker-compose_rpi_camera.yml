# --- README ---
# RPi now uses new camera driver, which is not supported by V4L2 node
# To fix this, you should use legacy driver
# On the host, open /boot/firmware/config.txt
# Comment out 'camera_auto_detect=1'
# Add 'start_x=1'

# --- Docker compose commands ---

# Create and start containers defined in the compose file
# NOTE Docker Compose detects changes in your configuration files, 
# including the Dockerfile, and automatically rebuilds the corresponding images if necessary
#   `docker compose -f docker-compose_teleop.yml up'
#
# Stop and remove containers that were created based on the 
# configuration specified in the compose file.
#   `docker compose -f docker-compose_teleop.yml down'
# 
# Rebuild all services (all the images are built from scratch)
# --build option indicates that Docker Compose should rebuild the images, 
# even if they already exist
#   `docker compose -f docker-compose_teleop.yml up --build`
# 
# To rebuild a certain service:
#   `docker compose up --build <service_name>`
#
# To run a certain service:
#   `docker compose up <service_name>`
#   i.e `docker compose -f docker-compose_teleop.yml up bfb_teleop`
# --------------------

services:
  bfb_rpi_camera:
    build:
      context: ../..
      dockerfile: docker/rpi_camera/Dockerfile.bfb_rpi_camera

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_b7e1ed6c02a6fa3c1c7392479291c035

    # The name of the Docker image to be created from the Dockerfile
    image: bfb_rpi_camera:latest

    # The name to be given to the container created from the image
    container_name: bfb_rpi_camera_container

    # Map all devices from host to container
    volumes:
      - '/dev:/dev'

    privileged: true

    network_mode: "host"

    stdin_open: true # docker run -i
    tty: true        # docker run -t