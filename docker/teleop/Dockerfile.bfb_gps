# Install udev rule for GPS module on the host:
# Copy bfb_gps/udev/99-gps-module.rules to /etc/udev/rules.d
# Run udevadm control --reload-rules && udevadm trigger

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ARG DEBIAN_FRONTEND=noninteractive
# NB! It should be actively discouraged to set the DEBIAN_FRONTEND to noninteractive via ENV. 
# The reason is that the environment variable persists after the build
# ARG is only available during the build of the image

ENV ROS_WS=/ros2_ws

# If you only need to set the SHELL environment variable for other purposes, such as in a 
# script that will be run inside the container
# NB! This command sets the SHELL environment variable to /bin/bash, but it does not change 
# the default shell used to run subsequent commands in the Dockerfile
ENV SHELL=/bin/bash

# Sets the default shell for running subsequent commands in the Dockerfile
# (the default shell on Linux is ["/bin/sh", "-c"])
# -c: This option specifies that the next argument is the command to execute.
SHELL ["/bin/bash", "-c"]

# Create ROS2 working directory
RUN mkdir -p ${ROS_WS}/src

# !!! Not valid anymore: Workaround as of 19.01.2025 there was a GPG error ONLY with nvcr base image
# RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
#     && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null

# 06.06.2025 fix
# RUN curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor --batch --yes -o /usr/share/keyrings/kitware-archive-keyring.gpg \
#     && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' > /etc/apt/sources.list.d/kitware.list \
#     && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | gpg --dearmor --batch --yes -o /usr/share/keyrings/ros-archive-keyring.gpg \
#     && echo "deb [signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2-testing/ubuntu focal main" > /etc/apt/sources.list.d/ros2-testing.list

# 02.07.2025 fix
RUN apt-key del F42ED6FBAB17C654 \
    && rm -f /usr/share/keyrings/ros-archive-keyring.gpg \
    && curl -fsSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | sudo gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && sed -i '/isaac-ros/d' /etc/apt/sources.list \
    && curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | \
    gpg --yes --dearmor -o /usr/share/keyrings/kitware-archive-keyring.gpg

# -------- Build and install packages --------
COPY src/bfb_gps ${ROS_WS}/src/bfb_gps
COPY src/bfb_interfaces ${ROS_WS}/src/bfb_interfaces
RUN cd ${ROS_WS}/src \
    && git clone -b ros2 https://github.com/ros-drivers/nmea_navsat_driver.git

# Install wget and pip
RUN apt-get update \
    && apt-get install -y wget \
    && cd / \
    && wget https://bootstrap.pypa.io/pip/3.8/get-pip.py \
    && python3 get-pip.py \
    && rm get-pip.py

# Install Python pyserial and gpxpy library (for writing to .gpx file)
RUN pip install pyserial gpxpy

# Install dependencies for all packages in the workspace
RUN apt-get update \
    && cd ${ROS_WS} \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && rosdep update \
    && rosdep install -y \
      --ignore-src \
      --from-path src \ 
      --rosdistro ${ROS_DISTRO} \
    # with --symlink-install you don't have to rebuild the package 
    # when Python source file is changed
    # NB! package needs to be rebuilt if a new file is added to the package
    && colcon build --symlink-install \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Setup entrypoint
COPY docker/ros_entrypoint.sh /

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]

#CMD ["ros2", "launch", "motor_control", "motor_control_launch.py"]
CMD ["bash"]