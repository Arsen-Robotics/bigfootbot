ARG BASE_IMAGE

# For running on Nvidia Jetson device (arm64/aarch64 Nvidia GPU accelerated)
# Image built: 23.05.2023
#ARG BASE_IMAGE="nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_33836e394da2d095a59afd2d151038f8"

# --- For running on x86/amd64 and arm64/aarch64
# NB! Not Nvidia GPU accelerated
# NOTE As of May 25, 2023, Ubuntu 22.04 "Jammy" was used.
# ROS2 version: communication libraries, message packages, command line tools. No GUI tools
# ARG BASE_IMAGE="ros:humble-ros-base"
# --------

FROM ${BASE_IMAGE}

# Zero interaction while installing or upgrading the system via apt. 
# It accepts the default answer for all questions.
ARG DEBIAN_FRONTEND=noninteractive

# ROS2 workspace
ENV ROS_WS=/ros2_ws

# If you only need to set the SHELL environment variable for other purposes, such as in a 
# script that will be run inside the container
# NB! This command sets the SHELL environment variable to /bin/bash, but it does not change 
# the default shell used to run subsequent commands in the Dockerfile
ENV SHELL=/bin/bash

# Sets the default shell for running subsequent commands in the Dockerfile
# (the default shell on Linux is ["/bin/sh", "-c"])
# -c: This option specifies that the next argument is the command to execute.
SHELL ["/bin/bash", "-c"]

# Create ROS2 working directory
RUN mkdir -p ${ROS_WS}/src

# Build and install packages
COPY motor_control ${ROS_WS}/src/motor_control

# Add udev rule for RoboClaw
RUN cp ${ROS_WS}/src/motor_control/udev/99-roboclaw.rules /etc/udev/rules.d

# Install pyserial for serial communication
RUN pip install pyserial

# Install official RoboClaw python library
RUN cd / && wget http://downloads.basicmicro.com/code/roboclaw_python.zip \
    && unzip roboclaw_python.zip && cd roboclaw_python \
    && cp -r roboclaw_python /usr/local/lib/python3.8/dist-packages \
    && cd / && rm -rf roboclaw_python.zip roboclaw_python

RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
    && apt-get update \
    && cd ${ROS_WS} \
    && source /opt/ros/${ROS_DISTRO}/setup.bash \
    && git clone https://github.com/foxglove/ros-foxglove-bridge.git src/ros-foxglove-bridge \
    && rosdep update \
    && rosdep install -y \
      --ignore-src \
      --from-path src \ 
      --rosdistro ${ROS_DISTRO} \
    && colcon build \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Setup entrypoint
COPY docker/ros_entrypoint.sh /

# [] - is exec form
# exec form vs shell form - the difference is whether the specified command is invoked inside a shell or not
# Exec - runs the process directly (not inside a shell) (doesn't create separate process to run a command/program)
# So shell process with PID 1 is replaced by the process of running program in exec mode
ENTRYPOINT ["/ros_entrypoint.sh"]

#CMD ["ros2", "launch", "motor_control", "motor_control_launch.py"]