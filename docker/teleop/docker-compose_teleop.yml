# --- README ---
# Install udev rules for RoboClaw, GPS module and Arduino Mega on the host:
# Copy motor_control/udev/99-roboclaw.rules to /etc/udev/rules.d
# Copy bfb_gps/udev/99-gps-module.rules to /etc/udev/rules.d
# Copy motor_control/udev/99-arduino-mega.rules to /etc/udev/rules.d
# Run udevadm control --reload-rules && udevadm trigger

# --- Docker compose commands ---

# Create and start containers defined in the compose file
# NOTE Docker Compose detects changes in your configuration files, 
# including the Dockerfile, and automatically rebuilds the corresponding images if necessary
#   `docker compose -f docker-compose_teleop.yml up'
#
# Stop and remove containers that were created based on the 
# configuration specified in the compose file.
#   `docker compose -f docker-compose_teleop.yml down'
# 
# Rebuild all services (all the images are built from scratch)
# --build option indicates that Docker Compose should rebuild the images, 
# even if they already exist
#   `docker compose -f docker-compose_teleop.yml up --build`
# 
# To rebuild a certain service:
#   `docker compose up --build <service_name>`
#
# To run a certain service:
#   `docker compose up <service_name>`
#   i.e `docker compose -f docker-compose_teleop.yml up bfb_teleop`
# --------------------

services:
  bfb_roboclaw_control:
    build:
      context: ../..
      dockerfile: docker/teleop/Dockerfile.bfb_roboclaw_control

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_692ceb1a0a35fe8a1f37641bab978508
      
    # The name of the Docker image to be created from the Dockerfile
    image: bfb_roboclaw_control:latest

    # The name to be given to the container created from the image
    container_name: bfb_roboclaw_control_container

    # Map all devices from host to container
    volumes:
      - '/dev:/dev'

    privileged: true

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #network_mode: "host"

    command: ros2 run motor_control roboclaw_control_node

  bfb_joy_to_twist:
    build:
      context: ../..
      dockerfile: docker/teleop/Dockerfile.bfb_joy_to_twist

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_692ceb1a0a35fe8a1f37641bab978508
      
    # The name of the Docker image to be created from the Dockerfile
    image: bfb_joy_to_twist:latest

    # The name to be given to the container created from the image
    container_name: bfb_joy_to_twist_container

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #network_mode: "host"

    command: ros2 run motor_control joy_to_twist_node

  bfb_foxglove_bridge:
    build:
      context: ../..
      dockerfile: docker/teleop/Dockerfile.bfb_foxglove_bridge

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_692ceb1a0a35fe8a1f37641bab978508

    # The name of the Docker image to be created from the Dockerfile
    image: bfb_foxglove_bridge:latest

    # The name to be given to the container created from the image
    container_name: bfb_foxglove_bridge_container

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #network_mode: "host"

    ports:
      # - "8765:8765"
      - "9090:9090"

    # command: ros2 launch foxglove_bridge foxglove_bridge_launch.xml
    command: ros2 launch rosbridge_server rosbridge_websocket_launch.xml

  bfb_gps:
    build:
      context: ../..
      dockerfile: docker/teleop/Dockerfile.bfb_gps

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_692ceb1a0a35fe8a1f37641bab978508
      
    # The name of the Docker image to be created from the Dockerfile
    image: bfb_gps:latest

    # The name to be given to the container created from the image
    container_name: bfb_gps_container

    # Map all devices from host to container
    volumes:
      - '/dev:/dev'

    privileged: true

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #network_mode: "host"

    command: ros2 run bfb_gps gps_node

  bfb_arduino_gateway:
    build:
      context: ../..
      dockerfile: docker/teleop/Dockerfile.bfb_arduino_gateway

      # Pass arguments to Dockerfile to use different base images
      args:
        # Build the docker image for BOTH x86/amd64 and any arm64/aarch64 device
        - BASE_IMAGE=ros:humble-ros-base
        
        # Build the docker image for ONLY Jetson device (Nvidia GPU accelerated)
        #- BASE_IMAGE=nvcr.io/nvidia/isaac/ros:aarch64-ros2_humble_692ceb1a0a35fe8a1f37641bab978508
      
    # The name of the Docker image to be created from the Dockerfile
    image: bfb_arduino_gateway:latest

    # The name to be given to the container created from the image
    container_name: bfb_arduino_gateway_container

    # Map all devices from host to container
    volumes:
      - '/dev:/dev'

    privileged: true

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    #network_mode: "host"

    command: ros2 run motor_control arduino_gateway_node