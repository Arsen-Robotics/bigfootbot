// Install with 'npm i <module>' & Import necessary modules
import express, { Application } from "express";
import { Server as SocketIOServer } from "socket.io";
import { createServer, Server as HTTPServer } from "http";
import path from "path";
 
export class Server { // export means that this class can be imported in other files
  private app: Application;
  private httpServer: HTTPServer;
  private io: SocketIOServer;
  
  private readonly DEFAULT_PORT = 3000; // server listens on port 3000
 
  constructor() {
    this.app = express();
    this.httpServer = createServer(this.app);
    this.io = new SocketIOServer(this.httpServer);
    //this.io = socketIO(this.httpServer);
    //this.initialize();
    
    this.configureApp();
    this.configureRoutes();
    this.handleSocketConnection();
  }
   
  // Tell express, which static files you want to serve.
  // In this case, we want to serve the files in the public folder.
  // So typing localhost:3000/index.html (or localhost:3000) will serve the index.html file in the public folder.
  private configureApp(): void {
    this.app.use(express.static(path.join(__dirname, "../public")));
  }
 
  /*private initialize(): void {
    this.app = express();
    this.httpServer = createServer(this.app);
    this.io = socketIO(this.httpServer);
  }*/
 
  private configureRoutes(): void {
    this.app.get("/", (req, res) => { // When you go to localhost:3000, you will see "Hello World"
      res.send(`<h1>Hello World</h1>`);  // But when static files are served, you will see the index.html file in the public folder.
    });

    this.app.get("/test", (req, res) => { // when you go to localhost:3000/test, you will see "Hello test"
      res.send(`<h1>Hello test</h1>`); 
    });
  }

  /**
   * Handles the WebSocket connections for WebRTC signaling.
   * This function sets up the event handlers for signaling messages such as 'offer', 'answer', and 
   * 'candidate', which are essential for establishing a peer-to-peer connection between clients.
   * socket.io is used as signaling server (to exchange information between two devices about video/audio streams)
   * So signaling server is this Node.js server (server.ts) and signaling clients are the two devices (browsers) 
   * that want to communicate. Devices connect to the signaling server using socket.io (WebSockets or HTTP long polling 
   * [in case WebSocket connection cannot be established]).
   */
  private handleSocketConnection(): void {
    this.io.on("connection", (socket) => {
      console.log("Socket connected.");
            
      // Handles the 'offer' event sent by a client (robot operator) initiating a WebRTC connection.
      // This event occurs when the robot operator opens the web page hosted on the robot, which includes the camera feed.
      // The offer contains session description information generated by the operator's browser.
      // This offer is then broadcasted to all other connected clients (e.g., other remote viewers or servers).
      socket.on("offer", (offer) => { 
        socket.broadcast.emit("offer", offer);
      });
      

      // Handles the 'answer' event sent by a client responding to an offer.
      // The answer contains session description information.
      // This is broadcast to all other connected clients.
      socket.on("answer", (answer) => {
        socket.broadcast.emit("answer", answer);
      });
      
      // Handles the 'candidate' event sent by a client during the ICE candidate exchange.
      // ICE candidates are used to help clients find the best connection path to each other.
      // This is broadcast to all other connected clients.
      socket.on("candidate", (candidate) => {
        socket.broadcast.emit("candidate", candidate);
      });
      
      // Handles the 'disconnect' event which occurs when a client disconnects from the server.
      socket.on("disconnect", () => {
        console.log("Socket disconnected.");
      });
    });
  }
 
  /**
   * Starts the HTTP server and listens for incoming connections on the specified port.
   * @param callback - A callback function that is called once the server starts listening.
   * The callback receives the port number as an argument.
   */
  public listen(callback: (port: number) => void): void {
    this.httpServer.listen(this.DEFAULT_PORT, () =>
      callback(this.DEFAULT_PORT)
    );
  }
}