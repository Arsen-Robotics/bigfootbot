FROM arm64v8/ubuntu:20.04

# Set non-interactive installation and prevent apt from hanging on user prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set working directory
WORKDIR /app

# Install package dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    # GStreamer core
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    libgstreamer-webrtc-1.0-dev \
    libgstreamer-sdp-1.0-dev \
    # GStreamer plugins
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gstreamer1.0-alsa \
    # WebSocket and JSON support
    libwebsocketpp-dev \
    libjsoncpp-dev \
    # Boost libraries
    libboost-system-dev \
    libboost-thread-dev \
    # Video for Linux
    libv4l-dev \
    # Additional tools
    git \
    python3 \
    python3-pip \
    sudo \
    && echo "Verifying WebRTC headers and libraries installation:" \
    && ls -la /usr/include/gstreamer-1.0/gst/webrtc/ || echo "Warning: WebRTC headers not found" \
    && ls -la /usr/lib/*/libgstreamer-webrtc-1.0.so || echo "Warning: WebRTC library not found" \
    && ls -la /usr/lib/*/libgstreamer-sdp-1.0.so || echo "Warning: SDP library not found" \
    && pkg-config --modversion gstreamer-1.0 || echo "Warning: pkg-config can't find GStreamer" \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify critical packages are installed
RUN g++ --version && \
    echo "Checking for critical libraries:" && \
    ls -la /usr/include/gstreamer-1.0/gst/webrtc/ && \
    ls -la /usr/lib/*/libgstreamer-webrtc-1.0.so && \
    ls -la /usr/lib/*/libgstreamer-sdp-1.0.so

# Copy source files
COPY src/ /app/src/
COPY docker-build.sh /app/

# Make build script executable and run the build
RUN chmod +x /app/docker-build.sh && \
    ./docker-build.sh

# Set up web client
RUN mkdir -p /app/client
COPY client/ /app/client/

# Create a simple script to serve web client files
RUN echo '#!/bin/bash\ncd /app/client && python3 -m http.server 8080' > /app/serve_client.sh && \
    chmod +x /app/serve_client.sh

# Create entrypoint script
RUN echo '#!/bin/bash\n\
if [ "$1" = "signaling" ]; then\n\
  exec /app/bin/signaling\n\
elif [ "$1" = "sender" ]; then\n\
  if [ -z "$2" ]; then\n\
    echo "Error: Missing server address. Usage: sender <server_address> [<server_port>]"\n\
    exit 1\n\
  fi\n\
  SERVER_ADDR=$2\n\
  SERVER_PORT=${3:-8765}\n\
  # List available video devices to help with debugging\n\
  echo "Available video devices:"\n\
  ls -la /dev/video* 2>/dev/null || echo "No video devices found"\n\
  echo "Starting sender connecting to $SERVER_ADDR:$SERVER_PORT"\n\
  # Run the sender\n\
  exec /app/bin/send_rpi $SERVER_ADDR $SERVER_PORT\n\
elif [ "$1" = "web" ]; then\n\
  exec /app/serve_client.sh\n\
else\n\
  echo "Usage: $0 {signaling|sender <server_address> [<server_port>]|web}"\n\
  exit 1\n\
fi' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Set the entrypoint and default command
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["signaling"]

# Expose ports for signaling and web server
EXPOSE 8765 8080 