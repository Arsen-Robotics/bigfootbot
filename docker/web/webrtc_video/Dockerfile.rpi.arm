FROM arm64v8/ubuntu:20.04

# Set non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gstreamer1.0-alsa \
    libwebsocketpp-dev \
    libjsoncpp-dev \
    libboost-system-dev \
    libboost-thread-dev \
    git \
    python3 \
    libv4l-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /app

# Copy source files
COPY src/ /app/src/
COPY build_rpi.sh /app/

# Make build script executable
RUN chmod +x /app/build_rpi.sh

# Modify build script to skip dependency check (we've already installed everything)
RUN sed -i 's/check_dependencies/#check_dependencies/' /app/build_rpi.sh
# DO NOT remove the -mtune=cortex-a72 flag as it provides important optimizations for Raspberry Pi 4

# Build the applications
RUN ./build_rpi.sh

# Create directory for client web files
RUN mkdir -p /app/client
COPY client/ /app/client/

# Create a simple script to serve the client files
RUN echo '#!/bin/bash\ncd /app/client && python3 -m http.server 8080' > /app/serve_client.sh \
    && chmod +x /app/serve_client.sh

# Create an entrypoint script to handle different modes
RUN echo '#!/bin/bash\n\
if [ "$1" = "signaling" ]; then\n\
  exec /app/bin/signaling\n\
elif [ "$1" = "sender" ]; then\n\
  if [ -z "$2" ]; then\n\
    echo "Error: Missing server address. Usage: sender <server_address> [<server_port>]"\n\
    exit 1\n\
  fi\n\
  SERVER_ADDR=$2\n\
  SERVER_PORT=${3:-8765}\n\
  # List available video devices to help with debugging\n\
  ls -la /dev/video*\n\
  # Run the sender\n\
  exec /app/bin/send_rpi $SERVER_ADDR $SERVER_PORT\n\
elif [ "$1" = "web" ]; then\n\
  exec /app/serve_client.sh\n\
else\n\
  echo "Usage: $0 {signaling|sender <server_address> [<server_port>]|web}"\n\
  exit 1\n\
fi' > /app/entrypoint.sh \
    && chmod +x /app/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["signaling"]

# Expose ports
EXPOSE 8765 8080 